name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@2d518188e746defd451af981c3c901f463d99e29
      uses: jurplel/install-qt-action@v3.2.1
      with:
        # Directory to install Qt
        dir: ${{github.workspace}}/src/qt/ # optional
        # Version of Qt to install
        version: 5.15.2 # optional, default is 5.15.2
        # Host platform
        host: linux # optional
        # Target platform for build
        target: desktop # optional, default is desktop
        # Architecture for Windows/Android
#         arch: # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: true # optional, default is true
        # Additional Qt modules to install
#         modules: # optional
        # Specify which Qt archive to install
#         archives: # optional
        # Whether or not to cache Qt automatically
#         cache: # optional
        # Cache key prefix for automatic cache
#         cache-key-prefix: # optional, default is install-qt-action
        # Whether or not to automatically run setup-python to find a valid python version.
#         setup-python: # optional, default is true
        # Qt tools to download -- specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>

#         tools: # optional
        # Whether or not to set environment variables after running aqtinstall
        set-env: true # optional, default is true
        # Whether or not to actually install Qt or just the tools from the tools argument
#         tools-only: # optional
        # Version of aqtinstall to use in case of issues
#         aqtversion: # optional, default is ==2.1.*
        # Version of py7zr to use in case of issues
#         py7zrversion: # optional, default is ==0.19.*
        # Any extra arguments to append to the back
#         extra: # optional

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt5_Dir}}
      working-directory: ${{github.workspace}}/src
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      working-directory: ${{github.workspace}}/src
      run: cmake --build ./build --config ${{env.BUILD_TYPE}}
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: build # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/src/build/*
        # The desired behavior if no files are found using the provided path.
#     Available Options:
#       warn: Output a warning but do not fail the action
#       error: Fail the action with an error message
#       ignore: Do not output any warnings or errors, the action does not fail

        if-no-files-found: error # optional, default is warn
        # Duration after which artifact will expire in days. 0 means using default retention.
        # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

#         retention-days: # optional

#     - name: Test
#       working-directory: ${{github.workspace}}/src/build
#       # Execute tests defined by the CMake configuration.
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}

